# ===============================
# = SERVER SECURE SOCKET SETTING
# ===============================
server.port = 8082
server.ssl.key-store = classpath:keystore.p12
server.ssl.key-store-password = mypassword
server.ssl.key-store-type = PKCS12
server.ssl.key-alias = tomcat


# ===============================
# = OAuth database
# ===============================
# The setting is moved to oauth2jdbc.properties
# It is configured by OAuth2ResourceServerConfig
# @PropertySource({"classpath:oauth2jdbc.properties"})


# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
# Details for our datasource
spring.datasource.url = jdbc:postgresql://localhost:5432/dns_over_https_db
spring.datasource.username = springbootdemo
spring.datasource.password = dorakido
#spring.datasource.driverClassName = org.postgresql.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1

# Automatically create table schema or update it but keep the previous data
spring.jpa.hibernate.ddl-auto=none 
spring.jpa.generate-ddl=false
#spring.jpa.properties.hibernate.hbm2ddl.auto=none
spring.jpa.properties.hibernate.hbm2ddl.auto=update


# ===============================
# = JPA / HIBERNATE
# ===============================
# LobCreatorBuilderImpl : HHH000424: Disabling contextual LOB creation as createClob() method threw error
# see: http://vkuzel.blogspot.de/2016/03/spring-boot-jpa-hibernate-atomikos.html
# Disable feature detection by this undocumented parameter. Check the org.hibernate.engine.jdbc.internal.JdbcServiceImpl.configure method for more details.
spring.jpa.properties.hibernate.temp.use_jdbc_metadata_defaults: false
# Because detection is disabled you have to set correct dialect by hand.
spring.jpa.database-platform: org.hibernate.dialect.PostgreSQL9Dialect


